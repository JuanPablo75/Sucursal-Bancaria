package sucursal_3;

import java.sql.*;
import java.time.LocalDate;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Juan Pablo
 */
public class Interfaz_3_0 extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz_3_0
     */
    public static Banco banco;
    
    public Interfaz_3_0() {
        
        initComponents();
        this.setLocationRelativeTo(null);
        banco = new Banco("Mi Banco");
        RefrescarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtDni = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtBuscarNombre = new javax.swing.JTextField();
        btnBuscarNombre = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaCuentas = new javax.swing.JTable();
        btnImportar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtRuta = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        menuAñadirUsuario = new javax.swing.JMenuItem();
        menuCambiarNombre = new javax.swing.JMenuItem();
        menuIngresar = new javax.swing.JMenuItem();
        menuExtraer = new javax.swing.JMenuItem();
        menuTransferencia = new javax.swing.JMenuItem();
        menuEliminarUsuario = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Roboto Black", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Buscar por Dni");

        jLabel2.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Dni:");

        txtDni.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N

        btnBuscar.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Roboto Black", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Buscar por nombre");

        jLabel4.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Nombre:");

        txtBuscarNombre.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N

        btnBuscarNombre.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        btnBuscarNombre.setText("Buscar");
        btnBuscarNombre.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBuscarNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarNombreActionPerformed(evt);
            }
        });

        TablaCuentas.setAutoCreateRowSorter(true);
        TablaCuentas.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        TablaCuentas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Dni", "Nombre", "Fecha", "Saldo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablaCuentas.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(TablaCuentas);

        btnImportar.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        btnImportar.setText("Importar");
        btnImportar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnImportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportarActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Roboto Black", 0, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Importar Otra Base de Datos");

        jLabel6.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Ruta Fichero:");

        txtRuta.setFont(new java.awt.Font("Roboto", 2, 10)); // NOI18N
        txtRuta.setText("C://Users//Juan Pablo//Documents//NetBeansProjects//Sucursal//ifp.db");
        txtRuta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRutaActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Roboto", 2, 12)); // NOI18N
        jLabel7.setText("Recuerda utilizar dobles barras \"//\"");

        jMenu2.setText("Menú");
        jMenu2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jMenu2.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N

        menuAñadirUsuario.setFont(new java.awt.Font("Roboto", 3, 12)); // NOI18N
        menuAñadirUsuario.setText("Añadir Usuario");
        menuAñadirUsuario.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        menuAñadirUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAñadirUsuarioActionPerformed(evt);
            }
        });
        jMenu2.add(menuAñadirUsuario);

        menuCambiarNombre.setFont(new java.awt.Font("Roboto", 3, 12)); // NOI18N
        menuCambiarNombre.setText("Cambiar Nombre Usuario");
        menuCambiarNombre.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        menuCambiarNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCambiarNombreActionPerformed(evt);
            }
        });
        jMenu2.add(menuCambiarNombre);

        menuIngresar.setFont(new java.awt.Font("Roboto", 3, 12)); // NOI18N
        menuIngresar.setText("Ingresar");
        menuIngresar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        menuIngresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuIngresarActionPerformed(evt);
            }
        });
        jMenu2.add(menuIngresar);

        menuExtraer.setFont(new java.awt.Font("Roboto", 3, 12)); // NOI18N
        menuExtraer.setText("Extraer");
        menuExtraer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        menuExtraer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExtraerActionPerformed(evt);
            }
        });
        jMenu2.add(menuExtraer);

        menuTransferencia.setFont(new java.awt.Font("Roboto", 3, 12)); // NOI18N
        menuTransferencia.setText("Transferencia");
        menuTransferencia.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        menuTransferencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuTransferenciaActionPerformed(evt);
            }
        });
        jMenu2.add(menuTransferencia);

        menuEliminarUsuario.setFont(new java.awt.Font("Roboto", 3, 12)); // NOI18N
        menuEliminarUsuario.setText("Eliminar Usuario");
        menuEliminarUsuario.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        menuEliminarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEliminarUsuarioActionPerformed(evt);
            }
        });
        jMenu2.add(menuEliminarUsuario);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtRuta, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnImportar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtBuscarNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnBuscarNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBuscarNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarNombre)
                    .addComponent(jLabel4))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRuta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnImportar)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addGap(54, 54, 54))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        try{
            Class.forName("org.sqlite.JDBC");
            Connection conexion = DriverManager.getConnection("jdbc:sqlite:ifp.db");
            Statement stm = conexion.createStatement();
            String query = "";
            
            if (getdni().equals("")){             //SI NO INTRODUCE NADA MUESTRA TODAS LAS FILAS
                query = "select * from cuenta";
                }
            else{
                query = "select * from cuenta where dni like '%" + getdni()+"%'"; //MUESTRAS FILAS FILTRANDO POR MUESTRA DE DNI
                }
            
            ResultSet rs = stm.executeQuery(query);
            
            DefaultTableModel tabla = (DefaultTableModel)TablaCuentas.getModel();
            tabla.setRowCount(0);
            
            while(rs.next()){

                String dni = rs.getString("dni");
                String nombre = rs.getString("nombre");
                java.sql.Date fechaSQL = rs.getDate("fecha");
                LocalDate fechaLD = fechaSQL.toLocalDate();
                float saldo = rs.getFloat("saldo");
                
                tabla.addRow(new Object[]{dni,nombre,fechaLD,saldo});
                }
            
            stm.close();
            conexion.close();
            }
         
        catch(ClassNotFoundException ex){
            
            System.out.println("error" + ex);
            }
         
        catch(SQLException ex){
            
            System.out.println("error" + ex);
            }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnBuscarNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarNombreActionPerformed
        try{
            Class.forName("org.sqlite.JDBC");
            java.sql.Connection conexion = DriverManager.getConnection("jdbc:sqlite:ifp.db");
            java.sql.Statement stm = conexion.createStatement();
            String query = "";
            
            if (getStringBuscarNombre().equals("")){ //SI NO INTRODUCE NADA MUESTRA TODAS LAS FILAS
                query = "select * from cuenta";
                }
            else{                                    //FILTRA NOMBRES POR MUESTRA
                query = "select * from cuenta where nombre like '%" + getStringBuscarNombre()+"%'";
                }
            ResultSet rs = stm.executeQuery (query);
            
            DefaultTableModel tabla = (DefaultTableModel)TablaCuentas.getModel();
            tabla.setRowCount(0);
            
            while(rs.next()){

                String dni = rs.getString("dni");
                String nombre = rs.getString("nombre");
                java.sql.Date fechaSQL = rs.getDate("fecha");
                LocalDate fechaLD = fechaSQL.toLocalDate();
                float saldo = rs.getFloat("saldo");
                
                tabla.addRow(new Object[]{dni,nombre,fechaLD,saldo});
                }
            
            stm.close();
            conexion.close();
            }
        catch(ClassNotFoundException ex){
            System.out.println("error" + ex);
            }
        catch(SQLException ex){
            System.out.println("error" + ex);
            }
    }//GEN-LAST:event_btnBuscarNombreActionPerformed

    private void menuAñadirUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAñadirUsuarioActionPerformed
        
        PanelCrearCuenta PanelCN = new PanelCrearCuenta();

        int result = JOptionPane.showConfirmDialog(null, PanelCN,"Crear Cuenta",JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE);
        
        String dni = PanelCN.ObtenerDni();
        String nombre = PanelCN.ObtenerNombre();
        
        if(result == JOptionPane.OK_OPTION){
            
            if(banco.CrearCuenta(dni,nombre)!= null){    //COMPRUEBO QUE PUEDO CREAR LA CUENTA Y LA CREO. LA FUNCION CrearCuenta() COMPRUEBA DUPLICADOS CON BuscarCuenta()
                JOptionPane.showInternalMessageDialog(null, "Cuenta creada correctamente.",
                    "Confirmación.", JOptionPane.INFORMATION_MESSAGE);
                RefrescarTabla();
                }
            else{
                JOptionPane.showMessageDialog(null, "Compruebe Dni.", "Error.", JOptionPane.ERROR_MESSAGE);
                }
            }
    }//GEN-LAST:event_menuAñadirUsuarioActionPerformed

    private void menuCambiarNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCambiarNombreActionPerformed
    
        Cnombre panelNN = new Cnombre();
        
        int result = JOptionPane.showConfirmDialog(null, panelNN, "Cambiar Nombre.",JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE);
        
        String dni = panelNN.getDni();
        String nombre_nuevo = panelNN.getNNombre();
        
        if(result == JOptionPane.OK_OPTION){
            
            if(banco.CambiarNombre(dni, nombre_nuevo)){ //CambiarNombre() EVALUA A FALSE SI EL DNI NO EXISTE
                JOptionPane.showInternalMessageDialog(null, "Nombre cambiado correctamente.",
                    "Confirmación.", JOptionPane.INFORMATION_MESSAGE);
                RefrescarTabla();
                }
            else{
                JOptionPane.showMessageDialog(null, "Compruebe Dni.", "Error.", JOptionPane.ERROR_MESSAGE);
                }
            } 
    }//GEN-LAST:event_menuCambiarNombreActionPerformed

    private void menuIngresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuIngresarActionPerformed
        
        PanelMovimientosSaldo PIngresar = new PanelMovimientosSaldo();
        
        int result = JOptionPane.showConfirmDialog(null, PIngresar ,"Ingreso",JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE);
        
        String dni = PIngresar.getDni();
        Float cantidad = PIngresar.getCantidad();
        
        if (result == JOptionPane.OK_OPTION){
            
            if(banco.Ingresar(dni,cantidad)){     //Ingresar() EVALUA A FALSE SI EL DNI NO EXISTE
                JOptionPane.showInternalMessageDialog(null, "Ingreso generado correctamente.",
                    "Confirmación.", JOptionPane.INFORMATION_MESSAGE);
                RefrescarTabla();
                }
            else{
                JOptionPane.showMessageDialog(null, "Compruebe Dni.", "Error.", JOptionPane.ERROR_MESSAGE);
                }
            }
    }//GEN-LAST:event_menuIngresarActionPerformed

    private void menuExtraerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExtraerActionPerformed
        
        PanelMovimientosSaldo PExtraer = new PanelMovimientosSaldo();
        
        int result = JOptionPane.showConfirmDialog(null, PExtraer ,"Extraer",JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE);
        
        String dni = PExtraer.getDni();
        Float cantidad = PExtraer.getCantidad();
        
        if (result == JOptionPane.OK_OPTION){
            
            if(banco.Extraer(dni, cantidad)){       //Extraer() EVALUA A FALSE SI EL DNI NO EXISTE O SI LA CUENTA ORIGEN NO TIENE SUFICIENTE SALDO
                JOptionPane.showInternalMessageDialog(null, "Extracción realizada correctamente.",
                "Confirmación.", JOptionPane.INFORMATION_MESSAGE);
                RefrescarTabla();
                }
            else{
                JOptionPane.showMessageDialog(null, "Compruebe fondos o Dni.", "Error.", JOptionPane.ERROR_MESSAGE);
                }
            }
        
    }//GEN-LAST:event_menuExtraerActionPerformed

    private void menuTransferenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuTransferenciaActionPerformed
        
        PanelTransferencias PTrans = new PanelTransferencias();
        int result = JOptionPane.showConfirmDialog(null, PTrans ,"Transferencia",JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE);
        
        String dniOrigen = PTrans.getDniOrigen();
        String dniDestino = PTrans.getDniDestino();
        float cantidad = PTrans.getCantidad();
        
        if (result == JOptionPane.OK_OPTION){

            if(banco.Transferencia(dniOrigen, dniDestino, cantidad)){ //Transferencia() UTILIZA Extraer() E Ingresar() Y EVALUA A FALSE CON Extraer()
                JOptionPane.showInternalMessageDialog(null, "Transferencia realizada correctamente.",
                "Confirmación.", JOptionPane.INFORMATION_MESSAGE);
                }
            else{
                JOptionPane.showMessageDialog(null, "Compruebe fondos o Dni.", "Error.", JOptionPane.ERROR_MESSAGE);
                }
            }
        RefrescarTabla();

    }//GEN-LAST:event_menuTransferenciaActionPerformed

    private void menuEliminarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEliminarUsuarioActionPerformed
        
        PanelEliminar PEliminar = new PanelEliminar();
        int result = JOptionPane.showConfirmDialog(null, PEliminar ,"Eliminar Cuenta",JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE);
        
        String dni = PEliminar.getDni();
        
        if (result == JOptionPane.OK_OPTION){
            
            if(banco.EliminarCuenta(dni)){  //EliminarCuenta() EVALUA A FALSE SI NO ENCUENTRA EL DNI
                JOptionPane.showInternalMessageDialog(null, "Cuenta Eliminada correctamente.",
                        "Confirmación.", JOptionPane.INFORMATION_MESSAGE);
                RefrescarTabla();
                }
            else{
                JOptionPane.showMessageDialog(null, "Compruebe Dni.", "Error.", JOptionPane.ERROR_MESSAGE);
                }
            }
    }//GEN-LAST:event_menuEliminarUsuarioActionPerformed
    public void ImportarDB(String ruta){
        
        try{
            Class.forName("org.sqlite.JDBC");
            Connection conexion = DriverManager.getConnection("jdbc:sqlite:"+ruta);
            Statement stm = conexion.createStatement();
            
            ResultSet rs = stm.executeQuery ("select * from cuenta");
            
            while(rs.next()){ //CREO CUENTAS POR CADA FILA DE LA BASE DE DATOS
                String dni = rs.getString("dni");
                String nombre = rs.getString("nombre");
                LocalDate fecha = rs.getDate("fecha").toLocalDate();
                float saldo = rs.getFloat("saldo");

                Cuenta c = banco.CrearCuenta(dni, nombre); //AL CREAR LAS CUENTAS LAS ESTOY EMPUJANDO A MI BASE DE DATOS "PRIVADA"
                
                if(c != null){      //UTILIZO CONDICION PARA NO SALIR DEL LOOP EN CASO DE CUENTA DUPLICADA
                    c.setFecha(fecha);
                    c.setSaldo(saldo);
                    }
                }
            
            stm.close();
            conexion.close();
            }
        catch(ClassNotFoundException ex){
            System.out.println("Error" + ex);
            }
        catch(SQLException ex){
            System.out.println("Error" + ex);
            }
    }
    private void btnImportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportarActionPerformed
        
        String ruta = txtRuta.getText();
        ImportarDB(ruta);
        RefrescarTabla();
    }//GEN-LAST:event_btnImportarActionPerformed

    private void txtRutaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRutaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRutaActionPerformed

    /**
     * @param args the command line arguments
     */
    private String getdni(){
        
       return txtDni.getText();
    }
    private String getStringBuscarNombre(){
        return txtBuscarNombre.getText();
    }
    private void RefrescarTabla(){
        
        DefaultTableModel modelo = (DefaultTableModel)TablaCuentas.getModel();
        modelo.setRowCount(0);
        
        List<Cuenta> cuentas = banco.getListDB(); //IMPORTO MI BASE DE DATOS "PRINCIPAL"
        
        for(Cuenta c : cuentas){
            String dni = c.getDni();
            String nombre = c.getNombre();
            double saldo = c.getSaldo();
            LocalDate fecha = c.getDate();
            
            modelo.addRow(new Object[]{dni,nombre,fecha,saldo});
            }
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz_3_0.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz_3_0.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz_3_0.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz_3_0.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz_3_0().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TablaCuentas;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnBuscarNombre;
    private javax.swing.JButton btnImportar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem menuAñadirUsuario;
    private javax.swing.JMenuItem menuCambiarNombre;
    private javax.swing.JMenuItem menuEliminarUsuario;
    private javax.swing.JMenuItem menuExtraer;
    private javax.swing.JMenuItem menuIngresar;
    private javax.swing.JMenuItem menuTransferencia;
    private javax.swing.JTextField txtBuscarNombre;
    private javax.swing.JTextField txtDni;
    private javax.swing.JTextField txtRuta;
    // End of variables declaration//GEN-END:variables
}
